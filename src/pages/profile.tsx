import { useEffect, useState, useRef } from "react";
import {
  getUserInfo,
  getPhoneNumber,
  openShareSheet,
  saveImageToGallery,
  showToast,
  minimizeApp,
  createShortcut,
  followOA,
  viewOAQr,
  getSetting,
  authorize,
  openPermissionSetting,
  favoriteApp 
} from "zmp-sdk/apis";
import { Avatar, Page, Text, Button, Icon } from "zmp-ui";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import LOGO from "@/image/cropped-logo-tron-ADSDIGI.png";
import ZALO from "@/image/icons8-zalo-48.png";
import QR_CODE from "@/image/download.png";
import BG_LABEl from "@/image/bg_img.png";

interface UserProfile {
  id: string;
  name: string;
  phone?: string;
  avatar: string;
    followedOA?: boolean;
      favoriteApp?: boolean;
}

declare global {
  interface Window {
    zaloMini?: {
      shareToFriend: (params: {
        type: "miniapp";
        appId: string;
        appParams?: string;
        success?: () => void;
        fail?: (err: any) => void;
      }) => void;
    };
  }
}

export default function ProfilePage() {
   const [user, setUser] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [showSharePopup, setShowSharePopup] = useState(false);
  const [isFollowed, setIsFollowed] = useState<boolean | null>(null);
  const [isLiked, setIsLiked] = useState<boolean | null>(null);

const fetchUser = async () => {
  try {
    const userRes = await getUserInfo();

    const followed = userRes?.userInfo?.followedOA;
    const liked = userRes?.userInfo?.favoriteApp;
    setIsFollowed(typeof followed === "boolean" ? followed : null);
    setIsLiked(typeof liked === "boolean" ? liked : null);


    const fetchedUser: UserProfile = {
      id: userRes.userInfo.id,
      name: userRes.userInfo.name,
      avatar: userRes.userInfo.avatar,
      followedOA: followed === true,
        favoriteApp: liked === true,
    };

    console.log("‚úÖ Th√¥ng tin ng∆∞·ªùi d√πng:", fetchedUser);
    setUser(fetchedUser);
  } catch (err) {
    console.error("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin ng∆∞·ªùi d√πng:", err);
    toast.error("B·∫°n c·∫ßn c·∫•p quy·ªÅn truy c·∫≠p th√¥ng tin.");
  } finally {
    setLoading(false);
  }
};


  useEffect(() => {
    fetchUser();
  }, []);

  const checkPermissions = async () => {
    try {
      const setting = await getSetting();
      const grantedLocation = setting.authSetting?.["scope.userLocation"] === true;
      const grantedPhone = setting.authSetting?.["scope.userPhonenumber"] === true;

      if (grantedLocation && grantedPhone) {
        fetchUser();
        return;
      }

      const missingScopes: string[] = [];
      if (!grantedLocation) missingScopes.push("scope.userLocation");
      if (!grantedPhone) missingScopes.push("scope.userPhonenumber");

      if (missingScopes.length > 0) {
        const result = await authorize({
          scopes: missingScopes as any,
        });

        const allGranted =
          result["scope.userLocation"] === true &&
          result["scope.userPhonenumber"] === true;

        if (allGranted) {
          fetchUser();
        } else {
          openPermissionSetting();
        }
      }
    } catch (error) {
      const code = (error as any).code;
      if (code === -201) {
        console.warn("Ng∆∞·ªùi d√πng t·ª´ ch·ªëi c·∫•p quy·ªÅn.");
      } else {
        console.error("L·ªói khi xin quy·ªÅn:", error);
      }
    }
  };

  const handleDownloadQR = async () => {
    try {
      await saveImageToGallery({
        imageUrl: "https://adsdigi.com/wp-content/uploads/2025/05/zalo-miniapp-qr.png",
      });

      await showToast({ message: "·∫¢nh ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o th∆∞ vi·ªán!" });
    } catch (error) {
      console.error("‚ùå L·ªói l∆∞u ·∫£nh:", error);
      await showToast({ message: "Kh√¥ng th·ªÉ l∆∞u ·∫£nh v√†o thi·∫øt b·ªã." });
    }
  };

  const handleShareQR = () => {
    setShowSharePopup(true);
  };

  const handleCopyZaloMiniAppLink = () => {
    const link = "https://zalo.me/s/1872406626404526216/?utm_source=zalo-qr";
    try {
      const textArea = document.createElement("textarea");
      textArea.value = link;
      textArea.style.position = "fixed";
      textArea.style.opacity = "0";
      textArea.style.pointerEvents = "none";
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();

      const successful = document.execCommand("copy");
      document.body.removeChild(textArea);

      if (successful) {
        showToast({ message: "ƒê√£ sao ch√©p link Zalo th√†nh c√¥ng!" });
      } else {
        throw new Error("Kh√¥ng th·ªÉ sao ch√©p");
      }
    } catch (error) {
      console.error("L·ªói sao ch√©p:", error);
      showToast({ message: "Kh√¥ng th·ªÉ sao ch√©p. Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£." });
    }
  };

  const handleShareToZalo = async () => {
    try {
      const data = await openShareSheet({
        type: "link",
        data: {
          link: "https://zalo.me/s/1872406626404526216/?utm_source=zalo-qr",
        },
      });

      console.log("Chia s·∫ª th√†nh c√¥ng:", data);
      showToast({ message: "Chia s·∫ª th√†nh c√¥ng" });
    } catch (error) {
      console.error("L·ªói chia s·∫ª:", error);
    }
  };

  const handleMinimize = async () => {
    try {
      await minimizeApp();
    } catch (error) {
      console.error("Thu nh·ªè th·∫•t b·∫°i:", error);
    }
  };

  const handleCreateShortcut = async () => {
    try {
      const result = await createShortcut();
      console.log("T·∫°o shortcut th√†nh c√¥ng:", result);
    } catch (error) {
      console.error("T·∫°o shortcut th·∫•t b·∫°i:", error);
    }
  };

  const handleFollowOA = async () => {
    try {
      await followOA({ id: "3486274299209952959" });

      const res = await getUserInfo();
      const followed = res?.userInfo?.followedOA === true;
      setIsFollowed(followed);

      if (followed) {
        showToast({ message: "Follow th√†nh c√¥ng!" });
      } else {
        showToast({ message: "Vui l√≤ng x√°c nh·∫≠n quan t√¢m trong popup!" });
      }
    } catch (error: any) {
      if (error.code === -201) {
        console.log("Ng∆∞·ªùi d√πng t·ª´ ch·ªëi quan t√¢m");
      } else {
        console.log("L·ªói kh√°c", error);
      }
    }
  };


   
const handleLike = async () => {
  try {
    // G·ªçi API th√™m v√†o m·ª•c y√™u th√≠ch
    await favoriteApp();
    setIsLiked(true); // T·∫°m th·ªùi ƒë√°nh d·∫•u l√† ƒë√£ y√™u th√≠ch
    showToast({ message: "ƒê√£ th√™m v√†o m·ª•c y√™u th√≠ch!" });

    // L·∫•y l·∫°i th√¥ng tin user (n·∫øu app ƒë√£ public, s·∫Ω tr·∫£ v·ªÅ ƒë√∫ng)
    const res = await getUserInfo();
    const liked = res?.userInfo?.favoriteApp === true;

    // C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i n·∫øu API tr·∫£ v·ªÅ k·∫øt qu·∫£
    if (typeof liked === "boolean") {
      setIsLiked(liked);
    }
  } catch (error: any) {
    // N·∫øu ng∆∞·ªùi d√πng t·ª´ ch·ªëi c·∫•p quy·ªÅn
    if (error?.code === -201) {
      console.log("Ng∆∞·ªùi d√πng t·ª´ ch·ªëi c·∫•p quy·ªÅn y√™u th√≠ch app.");
    } else {
      console.error("L·ªói khi th√™m y√™u th√≠ch:", error);
    }

    showToast({ message: "Kh√¥ng th·ªÉ th√™m v√†o m·ª•c y√™u th√≠ch." });
  }
};

  const handleViewOAQRCode = async () => {
    try {
      await viewOAQr({
        id: "3486274299209952959",
      });
    } catch (error) {
      console.error("Kh√¥ng hi·ªÉn th·ªã ƒë∆∞·ª£c QR OA:", error);
    }
  };

  // Loading state
  if (loading)
    return (
      <Page>
        <p>ƒêang t·∫£i...</p>
      </Page>
    );

  // No user info
  if (!user)
    return (
      <Page>
        <p>Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin ng∆∞·ªùi d√πng.</p>
      </Page>
    );


  return (
    <Page className="flex flex-col pt-28 pb-20 px-3 space-y-6 bg-white dark:bg-black">
      <div className="flex justify-between">
        <div className="flex gap-4 items-center">
          <Avatar size={48} src={user?.avatar} />
          <div>
            <Text.Title>{user?.name}</Text.Title>
            <p className="text-sm font-bold">{user?.phone}</p>
          </div>
        </div>
        

      {isFollowed === false && (
          <button
            onClick={handleFollowOA}
            className="bg-red-600 text-white flex items-center border border-red-600 font-semibold text-sm py-1.5 px-3 gap-2 rounded-full h-10"
          >
            <img
              src={ZALO}
              alt="QR Zalo Mini App"
              className="w-6 h-6 object-cover rounded"
            />
            Quan t√¢m OA
          </button>
        )}
      </div>

      <div
        onClick={checkPermissions}
        className="w-full rounded-xl bg-red-600 text-white px-6 py-6 relative cursor-pointer"
      >
        <div className="relative z-10">
          <p className="text-lg font-semibold mb-1">ƒêƒÉng k√Ω th√†nh vi√™n</p>
          <p className="text-sm opacity-90">
            Nh·∫≠n th√¥ng tin nhanh nh·∫•t, m·ªü r·ªông ti·ªán √≠ch
          </p>
        </div>

        <div className="absolute right-6 top-1/2 -translate-y-1/2 text-[100px] opacity-10 z-0">
          üí∞
        </div>
      </div>

      {/* QR Mini App */}
      <div className="text-center border border-gray-200 dark:border-gray-700 p-4 rounded-lg">
        <p className="text-sm text-gray-500 mb-2">
          Chia s·∫ª m√£ QR n√†y ƒë·ªÉ c√≥ th√¥ng tin m·ªõi nh·∫•t nhanh ch√≥ng, b·∫£o m·∫≠t
        </p>
        <img
          src={LOGO}
          alt="QR Zalo Mini App"
          className="w-12 h-12 mx-auto mb-3 mt-2 rounded"
        />
        <img
          src={QR_CODE}
          alt="QR Zalo Mini App"
          className="w-48 h-48 mx-auto mb-4 rounded"
        />

        <p className="text-lg font-semibold mt-2">ADSDIGI</p>

        <div className="flex justify-center gap-4 mt-3">
          <Button onClick={handleDownloadQR} type="neutral" variant="secondary">
            <Icon icon="zi-download" size={16} className=" mr-1" />
            T·∫£i xu·ªëng
          </Button>
          <Button onClick={handleShareQR} type="neutral" variant="secondary">
            <Icon icon="zi-share" size={16} className="mb-1 mr-1" />
            Chia s·∫ª
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4 border-t border-b border-black-700 py-5">
        <div className="flex ">
          <button
            onClick={handleCreateShortcut}
            className="flex items-center text-white font-semibold py-2 px-4 gap-2 rounded-full bg-gradient-to-r from-red-500 to-red-700 shadow-md"
          >
            <img
              src={LOGO}
              alt="QR Zalo Mini App"
              className="w-6 h-6 rounded bg-white p-0.5"
            />
            T·∫°o ph√≠m t·∫Øt
          </button>
        </div>

        <div className="flex ">
          <button
            onClick={handleMinimize}
            className="flex items-center text-white font-semibold py-2 px-4 gap-2 rounded-full bg-gradient-to-r from-red-500 to-red-700 shadow-md"
          >
            <Icon icon="zi-setting" size={16} className="mr-1" />
            Thu nh·ªè
          </button>
        </div>
   

        <div className="flex">
          <button
            onClick={handleViewOAQRCode}
            className="flex items-center text-white font-semibold py-2 px-4 gap-2 rounded-full bg-gradient-to-r from-red-500 to-red-700 shadow-md"
          >
            <Icon icon="zi-qrline" size={16} className="mr-1" />
            QR OA
          </button>
        </div>

           {!isLiked && (
          <div className="flex">
          <button
            onClick={handleLike}
            className="flex items-center text-white font-semibold py-2 px-4 gap-2 rounded-full bg-gradient-to-r from-red-500 to-red-700 shadow-md"
          >
            <Icon icon="zi-heart-solid" size={16} className="mr-1" />
            Th√™m y√™u th√≠ch
          </button>
        </div>
        )}
      </div>

      {showSharePopup && (
        <div className="fixed inset-0 z-50 bg-black bg-opacity-40 flex items-center justify-center">
          <div className="bg-white w-[90%] max-w-md rounded-lg p-4 relative">
            <img
              src={BG_LABEl}
              alt="QR Zalo Mini App"
              className="w-full h-[25vh] object-cover mb-3 rounded"
            />
            <h2 className="text-xl font-bold text-center mb-1">
              Chia s·∫ª ƒë∆∞·ªùng d·∫´n
            </h2>
            <p className="text-center text-gray-600 mb-4">
              H√£y chia s·∫ª ngay ƒë∆∞·ªùng d·∫´n cho b·∫°n b√® ƒë·ªÉ k·∫øt b·∫°n nhanh ch√≥ng, b·∫£o
              m·∫≠t
            </p>

            <div className="grid grid-cols-2 gap-3">
              <button
                onClick={handleCopyZaloMiniAppLink}
                className="bg-white border border-solid border-red-600 text-red-600 font-semibold py-2 rounded-full"
              >
                <Icon icon="zi-copy" size={16} className="mr-1" />
                Sao ch√©p link
              </button>

              <button
                onClick={handleShareToZalo}
                className="bg-red-600 text-white font-semibold py-2 rounded-full"
              >
                <Icon icon="zi-share" size={16} className="mr-1" />
                Chia s·∫ª tr√™n Zalo
              </button>
            </div>

            <button
              className="absolute top-0 right-1 text-gray-500 hover:text-black"
              onClick={() => setShowSharePopup(false)}
            >
              ‚úï
            </button>
          </div>
        </div>
      )}
    </Page>
  );
}
